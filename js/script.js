// ‚úÖ on top button
$(function () {
  // „Çπ„É†„Éº„Çπ„Çπ„ÇØ„É≠„Éº„É´„Åß‰∏ä„Å´Êàª„Çã
  $('#scrollTopBtn').click(function () {
    $('html, body').animate({ scrollTop: 0 }, 500); // 0 l√† ƒë·∫ßu trang, 500ms l√† th·ªùi gian
    return false;
  });
});

// ‚úÖ jQuery Tooltip Script 
$(function () {
  $(".tooltip-img").hover(
    function () {
      $("body").append("<div id='tooltip'><p></p><span class='tooltip-arrow'></span></div>");
      $("#tooltip p").html($(this).attr("alt"));
      $("#tooltip").hide();
      const top = $(this).offset().top - $("#tooltip").outerHeight() - 10;
      const left = $(this).offset().left + $(this).width() / 2 - $("#tooltip").outerWidth() / 2;
      $("#tooltip").css({ top: top, left: left });
      $("#tooltip").fadeIn();
    },
    function () {
      $("#tooltip").remove();
    }
  );
});

// ‚úÖ T·∫°o h√†m toggleMenu ƒë·ªÉ ƒë√≥ng/m·ªü sidebar v√† overlay
function toggleMenu() {
  const sidebar = document.querySelector(".mobile-sidebar");
  const overlay = document.querySelector(".overlay");
  const hamburger = document.querySelector(".hamburger-menu");
  const menuIcon = document.getElementById("menu-icon");

  sidebar.classList.toggle("open");
  overlay.style.display = sidebar.classList.contains("open") ? "block" : "none";
  hamburger.classList.toggle("active");

  // ƒê·ªïi bi·ªÉu t∆∞·ª£ng üçî ‚Üî ‚ùå
  if (hamburger.classList.contains("active")) {
    menuIcon.textContent = "‚ùå";
  } else {
    menuIcon.textContent = "üçî";
  }
}


// Sidebar links
const sidebarLinks = document.querySelectorAll('.mobile-sidebar a');

sidebarLinks.forEach(link => {
  link.addEventListener('click', function () {
    // X√≥a active ·ªü t·∫•t c·∫£
    sidebarLinks.forEach(l => l.classList.remove('active'));
    // G√°n l·∫°i active cho ph·∫ßn ƒë∆∞·ª£c click
    this.classList.add('active');
  });
});

// N√∫t Ë©≥Á¥∞
const detailButtons = document.querySelectorAll('button[id$="DetailBtn"]');

detailButtons.forEach(btn => {
  btn.addEventListener('click', function () {
    // X√≥a active ·ªü c√°c n√∫t kh√°c
    detailButtons.forEach(b => b.classList.remove('active'));
    // G√°n l·∫°i
    this.classList.add('active');
  });
});


// ‚úÖ Global Popup Logic for All Sections (Including ABOUT ME)
// ƒê·∫£m b·∫£o DOM ƒë√£ s·∫µn s√†ng
document.addEventListener("DOMContentLoaded", () => {
  // ƒê·ªãnh nghƒ©a c√°c c·∫∑p n√∫t v√† modal t∆∞∆°ng ·ª©ng
  const modalMappings = [
    {
      buttonId: "eduDetailBtn",
      modalId: "eduModal",
      closeId: "closeEduModal"
    },
    {
      buttonId: "workDetailBtn",
      modalId: "workModal",
      closeId: "closeWorkModal"
    },
    {
      buttonId: "licenseDetailBtn",
      modalId: "licenseModal",
      closeId: "closeLicenseModal"
    },
    {
      buttonId: "jobDetailBtn",
      modalId: "jobModal",
      closeId: "closeJobModal"
    }
  ];

  // L·∫∑p qua t·ª´ng c·∫∑p ƒë·ªÉ g√°n s·ª± ki·ªán
  modalMappings.forEach(({ buttonId, modalId, closeId }) => {
    const button = document.getElementById(buttonId);
    const modal = document.getElementById(modalId);
    const closeBtn = document.getElementById(closeId);

    // N·∫øu t·∫•t c·∫£ ph·∫ßn t·ª≠ t·ªìn t·∫°i th√¨ m·ªõi g√°n s·ª± ki·ªán
    if (button && modal && closeBtn) {
      // M·ªü popup khi nh·∫•n n√∫t Ë©≥Á¥∞
      button.addEventListener("click", () => {
        modal.classList.add("show");
      });

      // ƒê√≥ng popup khi nh·∫•n n√∫t X
      closeBtn.addEventListener("click", () => {
        modal.classList.remove("show");
      });

      // ƒê√≥ng popup khi click ra ngo√†i ph·∫ßn modal-content
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.classList.remove("show");
        }
      });
    }
  });
});


// ‚úÖ Global Popup Logic for All Sections (Including WORKS)

// Element IDs specific for the WORKS section
const imageModal = document.getElementById("imageModal");
const modalImage = document.getElementById("modalImage");
const closeImageModal = document.getElementById("closeImageModal");

// Shared class for all image trigger buttons in WORKS
const imgButtons = document.querySelectorAll(".imgBtn");

imgButtons.forEach((btn) => {
  btn.addEventListener("click", function (e) {
    e.preventDefault();
    e.stopPropagation();

    const imgSrc = btn.getAttribute("data-src");
    if (imgSrc) {
      modalImage.setAttribute("src", imgSrc);
      imageModal.classList.add("show");
    }
  });
});

// Close button
closeImageModal.addEventListener("click", function () {
  imageModal.classList.remove("show");
  modalImage.setAttribute("src", "");
});

// Click outside to close
imageModal.addEventListener("click", function (e) {
  if (e.target === imageModal) {
    imageModal.classList.remove("show");
    modalImage.setAttribute("src", "");
  }
});



// ===========================
// Hobby Effects JS
// ===========================

let currentEffectIndex = 0;
const hobbyEffects = [
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 1: ËÉåÊôØËâ≤„ÅÆÂ§âÊõ¥",
    description: "Demo Element„ÅÆËÉåÊôØËâ≤„Åålightblue„Å´Â§â„Çè„Çã„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅåÂÜçÁîü„Åï„Çå„ÄÅÁµêÊûú„Åå‰øùÊåÅ„Åï„Çå„Åæ„Åô„ÄÇ",
    code: "demoElement.classList.toggle('bg-lightblue');",
    trigger: () => demoElement.classList.toggle("bg-lightblue"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 2: Ë°®Á§∫/ÈùûË°®Á§∫ÂàáÊõø",
    description: "Ë¶ÅÁ¥†„ÅÆË°®Á§∫/ÈùûË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà„Çã„Ç®„Éï„Çß„ÇØ„Éà„Åß„Åô„ÄÇ",
    code: "demoElement.classList.toggle('hidden');",
    trigger: () => demoElement.classList.toggle("hidden"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 3: „ÇØ„É©„Çπ„ÅÆËøΩÂä†",
    description: "„ÇØ„É©„Çπ active „ÇíËøΩÂä†: ËÉåÊôØËâ≤„Çí„Ç¥„Éº„É´„Éâ„Å´Â§âÊõ¥„Åó„ÄÅÊñáÂ≠óËâ≤„ÇíÂ§âÊõ¥„Åó„ÄÅÊû†Á∑ö„ÇíËøΩÂä†",
    code: "demoElement.classList.toggle('active');",
    trigger: () => demoElement.classList.toggle("active"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 4: ÂõûËª¢ÂäπÊûú",
    description: "Ë¶ÅÁ¥†„ÇíÂõûËª¢„Åï„Åõ„Åæ„Åô„ÄÇ",
    code: "demoElement.classList.toggle('rotate-45');",
    trigger: () => demoElement.classList.toggle("rotate-45"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 5: Êã°Â§ßÁ∏ÆÂ∞è",
    description: "Ë¶ÅÁ¥†„ÅÆ„Çµ„Ç§„Ç∫„ÇíÂ§âÊõ¥„Åó„Åæ„Åô„ÄÇ",
    code: "demoElement.classList.toggle('scale-150');",
    trigger: () => demoElement.classList.toggle("scale-150"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 6: ‰∏çÈÄèÊòéÂ∫¶„ÅÆÂ§âÊõ¥",
    description: "Ë¶ÅÁ¥†„ÅÆ‰∏çÈÄèÊòéÂ∫¶„ÇíÂ§âÊõ¥„Åó„Åæ„Åô„ÄÇ",
    code: "demoElement.classList.toggle('opacity-50');",
    trigger: () => demoElement.classList.toggle("opacity-50"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 7: ‰ΩçÁΩÆ„ÅÆÂ§âÊõ¥",
    description: "Ë¶ÅÁ¥†„ÅÆ‰ΩçÁΩÆ„ÇíÁßªÂãï„Åï„Åõ„Åæ„Åô„ÄÇ",
    code: "demoElement.classList.toggle('margin-left-50');",
    trigger: () => demoElement.classList.toggle("margin-left-50"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 8: „Çπ„É†„Éº„Ç∫„Çπ„ÇØ„É≠„Éº„É´",
    description: "„Éö„Éº„Ç∏„Çí„Çπ„É†„Éº„Ç∫„Å´„Çπ„ÇØ„É≠„Éº„É´„Åó„Åæ„Åô„ÄÇÔºàalert„Éá„É¢Ôºâ",
    code: "alert('„Çπ„É†„Éº„Ç∫„Çπ„ÇØ„É≠„Éº„É´„ÅÆ„Éá„É¢');",
    trigger: () => alert("„Çπ„É†„Éº„Ç∫„Çπ„ÇØ„É≠„Éº„É´„ÅÆ„Éá„É¢"),
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 9: HTMLÂÜÖÂÆπÂ§âÊõ¥",
    description: "Ë¶ÅÁ¥†„ÅÆÂÜÖÂÆπ„ÇíÂ§âÊõ¥„Åó„Åæ„Åô„ÄÇ",
    code: "demoElement.innerHTML = demoElement.innerHTML === 'Êñ∞„Åó„ÅÑÂÜÖÂÆπ' ? 'Demo Element' : 'Êñ∞„Åó„ÅÑÂÜÖÂÆπ';",
    trigger: () => {
      if (demoElement.innerHTML === 'Êñ∞„Åó„ÅÑÂÜÖÂÆπ') {
        demoElement.innerHTML = 'Demo Element';
        demoElement.classList.remove('red-text');
      } else {
        demoElement.innerHTML = 'Êñ∞„Åó„ÅÑÂÜÖÂÆπ';
        demoElement.classList.add('red-text');
      }
    }
  },
  {
    title: "„Ç®„Éï„Çß„ÇØ„Éà 10: ÂõûËª¢„Å®„Éï„Çß„Éº„ÉâÂäπÊûú",
    description: "Ë¶ÅÁ¥†„ÇíÂõûËª¢„Åï„Åõ„Å™„Åå„Çâ„Éï„Çß„Éº„Éâ„Åï„Åõ„Åæ„Åô„ÄÇ",
    code: "demoElement.classList.toggle('rotate-fade');",
    trigger: () => demoElement.classList.toggle("rotate-fade"),
  },
];

const effectGrid = document.getElementById("effectGrid");
hobbyEffects.forEach((effect, index) => {
  const container = document.createElement("div");
  container.className = `effect-item ${index % 2 === 1 ? 'reverse' : ''}`;
  container.innerHTML = `
    <div class="effect-img">
      <img src="images/hobby/${index + 1}.png" alt="effect${index + 1}">
    </div>
    <div class="effect-content">
      <h4>${effect.title}</h4>
      <p>${effect.description}</p>
      <button class="popup-btn" data-index="${index}">Ë©≥Á¥∞„ÇíË¶ã„Çã</button>
    </div>
  `;
  effectGrid.appendChild(container);
});

function openHobbyEffect(index) {
  currentEffectIndex = index;
  const effect = hobbyEffects[index];
  document.getElementById("hobbyModalTitle").textContent = effect.title;
  document.getElementById("hobbyModalContent").textContent = effect.description;
  const demo = document.getElementById("demoElement");
  demo.innerHTML = "Demo Element";
  demo.className = "";
  demo.removeAttribute("style");
  document.getElementById("effectCodeBlock").textContent = effect.code;
  document.getElementById("hobbyModal").classList.add("show");
}

function closeHobbyModal() {
  document.getElementById("hobbyModal").classList.remove("show");
}

function runEffect() {
  hobbyEffects[currentEffectIndex].trigger();
}

document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".popup-btn").forEach((btn) => {
    btn.addEventListener("click", function () {
      const index = parseInt(this.getAttribute("data-index"));
      openHobbyEffect(index);
    });
  });
});